{
	"info": {
		"_postman_id": "efda4612-8e5f-4507-a902-a39cce0d57f3",
		"name": "Restful Booker API Testing Project",
		"description": "API Testing Project Created By Seif Aldin Yasser.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "45807489",
		"_collection_link": "https://seifaldinyasser.postman.co/workspace/Seif-Aldin-Yasser's-Workspace~d44ca30a-a128-4a81-80b3-d9a3922ac13f/collection/45807489-efda4612-8e5f-4507-a902-a39cce0d57f3?action=share&source=collection_link&creator=45807489"
	},
	"item": [
		{
			"name": "Positive Endpoints",
			"item": [
				{
					"name": "Auth",
					"item": [
						{
							"name": "Login with Valid Credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonFile= pm.response.json();\r",
											"\r",
											"var token= jsonFile.token; \r",
											"\r",
											"pm.environment.set(\"token\", token); \r",
											"\r",
											"pm.test(\"Verify that Can Login with Valid Credentials and Receive a Token, with a Status Code of 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						}
					],
					"description": "Login to Get a Token."
				},
				{
					"name": "Booking",
					"item": [
						{
							"name": "Get All Existed Bookings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Can Get All Existed Bookings with a Status Code of 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/booking",
									"host": [
										"{{url}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a New Booking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonFile = pm.response.json();\r",
											"var bookingID = jsonFile.bookingid;\r",
											"pm.environment.set(\"bookingID\", bookingID);\r",
											"\r",
											"pm.test(\"Verify that Can Add New Booking with Status Code 0f 200.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Verify that Response Body Contains the Correct Data with Status Code of 200\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Seif Aldin\");\r",
											"    pm.expect(pm.response.text()).to.include(\"Yasser\");\r",
											"    pm.expect(pm.response.text()).to.include(200);\r",
											"    pm.expect(pm.response.text()).to.include(true);\r",
											"    pm.expect(pm.response.text()).to.include(\"2025-06-12\");\r",
											"    pm.expect(pm.response.text()).to.include(\"2025-06-22\");\r",
											"    pm.expect(pm.response.text()).to.include(\"Breakfast\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"firstname\" : \"Seif Aldin\",\r\n    \"lastname\" : \"Yasser\",\r\n    \"totalprice\" : 200,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-06-12\",\r\n        \"checkout\" : \"2025-06-22\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/booking",
									"host": [
										"{{url}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a New Booking By ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify That a New ID is Existed with a Status Code 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that Response Body Contains the Correct Data with Status Code of 200\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Seif Aldin\");\r",
											"    pm.expect(pm.response.text()).to.include(\"Yasser\");\r",
											"    pm.expect(pm.response.text()).to.include(200);\r",
											"    pm.expect(pm.response.text()).to.include(true);\r",
											"    pm.expect(pm.response.text()).to.include(\"2025-06-12\");\r",
											"    pm.expect(pm.response.text()).to.include(\"2025-06-22\");\r",
											"    pm.expect(pm.response.text()).to.include(\"Breakfast\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/booking/{{bookingID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"booking",
										"{{bookingID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a New Booking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Can Update a New Booking with Status Code 0f 200.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify that Response Body Contains the Updated Correct Data with Status Code of 200\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Seif Aldin\");\r",
											"    pm.expect(pm.response.text()).to.include(\"Yasser\");\r",
											"    pm.expect(pm.response.text()).to.include(290);\r",
											"    pm.expect(pm.response.text()).to.include(true);\r",
											"    pm.expect(pm.response.text()).to.include(\"2025-06-12\");\r",
											"    pm.expect(pm.response.text()).to.include(\"2025-06-25\");\r",
											"    pm.expect(pm.response.text()).to.include(\"Lunch\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"value": "token= {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"firstname\" : \"Seif Aldin\",\r\n    \"lastname\" : \"Yasser\",\r\n    \"totalprice\" : 290,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-06-12\",\r\n        \"checkout\" : \"2025-06-25\"\r\n    },\r\n    \"additionalneeds\" : \"Lunch\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/booking/{{bookingID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"booking",
										"{{bookingID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Updated New Booking By ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Can Get a Updated New Booking by ID With a Status Code of 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that Response Body Contains the Updated Correct Data with Status Code of 200\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Seif Aldin\");\r",
											"    pm.expect(pm.response.text()).to.include(\"Yasser\");\r",
											"    pm.expect(pm.response.text()).to.include(290);\r",
											"    pm.expect(pm.response.text()).to.include(true);\r",
											"    pm.expect(pm.response.text()).to.include(\"2025-06-12\");\r",
											"    pm.expect(pm.response.text()).to.include(\"2025-06-25\");\r",
											"    pm.expect(pm.response.text()).to.include(\"Lunch\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/booking/{{bookingID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"booking",
										"{{bookingID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a New Booking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Can Delete Existed Booking with Status Code of 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Cookie",
										"value": "token= {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"firstname\" : \"Seif Aldin\",\r\n    \"lastname\" : \"Yasser\",\r\n    \"totalprice\" : 200,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-06-12\",\r\n        \"checkout\" : \"2025-06-22\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/booking/{{bookingID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"booking",
										"{{bookingID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Deleted New Booking  By ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Deleted ID is Not Existed with Status Code of 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that Response Body Not Contains Data After Deleted with Status Code of 404\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Not Found\");\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/booking/{{bookingID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"booking",
										"{{bookingID}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Create Positive API Test Cases using REST API Methods for Booking."
				}
			],
			"description": "Created Positive API Test Cases."
		},
		{
			"name": "Negative Endpoints",
			"item": [
				{
					"name": "Auth",
					"item": [
						{
							"name": "Login with Empty Username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Cannot Login with Empty Username and Display Error Message (Bad credentials)\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \" \",\r\n    \"password\": \"password123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login with Invalid Username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Cannot Login with Invalid Username and Display Error Message (Bad credentials)\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"test\",\r\n    \"password\": \"password123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login with Empty Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Cannot Login with Empty Password and Display Error Message (Bad credentials)\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \" \"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login with Invalid Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Cannot Login with Invalid Password and Display Error Message (Bad credentials)\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"test20256$\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						}
					],
					"description": "Created Negative API Test Cases for Login."
				},
				{
					"name": "Booking",
					"item": [
						{
							"name": "Get Booking By Not Existed ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Cannot Get a Specified Booking by Not Existed ID with a Status Code of 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/booking/30686",
									"host": [
										"{{url}}"
									],
									"path": [
										"booking",
										"30686"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a Non Existed Booking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Cannot Update a Non Existed Booking with Status Code 0f 405.\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that Response Body Not Contains Data After Updated with Status Code of 405\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Method Not Allowed\");\r",
											"    pm.response.to.have.status(405);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"value": "token= {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\": \"Max\",\r\n    \"lastname\": \"Smith\",\r\n    \"totalprice\": 339,\r\n    \"depositpaid\": true,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2025-09-05\",\r\n        \"checkout\": \"2025-10-25\"\r\n    },\r\n    \"additionalneeds\": \"Lunch\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/booking/30686",
									"host": [
										"{{url}}"
									],
									"path": [
										"booking",
										"30686"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Updated Non Existed Booking By ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Cannot Get a Specified Booking by Not Existed ID with a Status Code of 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that Response Body Not Contains the Updated Data with Status Code of 404\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Not Found\");\r",
											"    pm.response.to.have.status(404)\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/booking/30686",
									"host": [
										"{{url}}"
									],
									"path": [
										"booking",
										"30686"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a New Booking with Missing Values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Cannot Add New Booking with Missing Values and Status Code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that No Data to Added with Status Code of 500\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Internal Server Error\");\r",
											"    pm.response.to.have.status(500);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"firstname\" : \"Seif Aldin\",\r\n    \"lastname\" : \"Yasser\",\r\n    \"totalprice\" : 290\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/booking",
									"host": [
										"{{url}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a Not Existed Booking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Cannot Delete Not Existed Booking with Status Code of 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that no Data to Delete with Status Code of 405\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Method Not Allowed\");\r",
											"    pm.response.to.have.status(405);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Cookie",
										"value": "token= {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\": \"Max\",\r\n    \"lastname\": \"Smith\",\r\n    \"totalprice\": 339,\r\n    \"depositpaid\": true,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2025-09-05\",\r\n        \"checkout\": \"2025-10-25\"\r\n    },\r\n    \"additionalneeds\": \"Lunch\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/booking/30686",
									"host": [
										"{{url}}"
									],
									"path": [
										"booking",
										"30686"
									]
								}
							},
							"response": []
						}
					],
					"description": "Create Negative API Test Cases using REST API Methods for Booking."
				}
			],
			"description": "Created Negative API Test Cases."
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}